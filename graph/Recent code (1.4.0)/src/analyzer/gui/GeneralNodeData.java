/* This file is part of TraceMetrics
 *
 * TraceMetrics is a trace file analyzer for Network Simulator 3 (www.nsnam.org).
 * The goal is to calculate useful metrics for research and performance measurement.
 * URL: www.tracemetrics.net
 *
 * Copyright (C) 2012  Luiz Felipe Zafra Saggioro
 * Copyright (C) 2012  Flavio Barbieri Gonzaga
 * Copyright (C) 2012  Reuel Ramos Ribeiro
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package analyzer.gui;

import analyzer.controller.Analyzer;
import analyzer.entity.MyFile;
import javax.swing.JFileChooser;

/**
 *
 * Panel to show a list of all nodes that communicated on the network and it's
 * calculated metrics.
 *
 * @since 1.0.0
 */
public class GeneralNodeData extends javax.swing.JPanel {

    /**
     * Creates new form GeneralDataPanel
     * @param name The name used in the tab
     */
    public GeneralNodeData(String name) {
        initComponents();
        this.setName(name);
        this.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jB_Export = new javax.swing.JButton();
        jB_ExportAll = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jT_Nodes = new javax.swing.JTable();
        jP_Details = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTA_DetailsText = new javax.swing.JTextArea();

        setPreferredSize(new java.awt.Dimension(630, 395));

        jB_Export.setIcon(new javax.swing.ImageIcon(getClass().getResource("/analyzer/gui/images/document_save.png"))); // NOI18N
        jB_Export.setText("Export this");
        jB_Export.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jB_ExportMouseReleased(evt);
            }
        });
        jB_Export.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_ExportActionPerformed(evt);
            }
        });

        jB_ExportAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/analyzer/gui/images/document_save_all.png"))); // NOI18N
        jB_ExportAll.setText("Export all");
        jB_ExportAll.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jB_ExportAllMouseReleased(evt);
            }
        });

        jT_Nodes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jT_NodesMouseReleased(evt);
            }
        });
        jScrollPane3.setViewportView(jT_Nodes);

        jP_Details.setBorder(javax.swing.BorderFactory.createTitledBorder("Details"));

        jTA_DetailsText.setColumns(20);
        jTA_DetailsText.setEditable(false);
        jTA_DetailsText.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jTA_DetailsText.setRows(5);
        jScrollPane1.setViewportView(jTA_DetailsText);

        javax.swing.GroupLayout jP_DetailsLayout = new javax.swing.GroupLayout(jP_Details);
        jP_Details.setLayout(jP_DetailsLayout);
        jP_DetailsLayout.setHorizontalGroup(
            jP_DetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 517, Short.MAX_VALUE)
        );
        jP_DetailsLayout.setVerticalGroup(
            jP_DetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jB_Export)
                        .addGap(18, 18, 18)
                        .addComponent(jB_ExportAll))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jP_Details, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, 0, 0, Short.MAX_VALUE)
                    .addComponent(jP_Details, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jB_ExportAll)
                    .addComponent(jB_Export))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jB_ExportMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jB_ExportMouseReleased
        JFileChooser fc = new JFileChooser();
        String path;

        if (Analyzer.getInstance().finished) {
            int status = fc.showDialog(null, "Save");

            if (status == JFileChooser.APPROVE_OPTION) {

                path = fc.getSelectedFile().getAbsolutePath();
                MyFile file = new MyFile();

                int nodeIndex = Integer.parseInt(jT_Nodes.getModel().getValueAt(jT_Nodes.getSelectedRow(), 0).toString());
                file.openFile2Write(path);
                file.writeLine(Analyzer.getInstance().getNode(nodeIndex).getDetails(true));
                file.closeFile();

            }
        }
    }//GEN-LAST:event_jB_ExportMouseReleased

    private void jB_ExportAllMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jB_ExportAllMouseReleased
        JFileChooser fc = new JFileChooser();
        String path;
        String content;


        if (Analyzer.getInstance().finished && Analyzer.getInstance().getNumberOfNodes() > 0) {

            int status = fc.showDialog(null, "Save");

            if (status == JFileChooser.APPROVE_OPTION) {

                path = fc.getSelectedFile().getAbsolutePath();
                MyFile file = new MyFile();
                file.openFile2Write(path);
                for (int i = 0; i < jT_Nodes.getRowCount(); i++) {

                    content = Analyzer.getInstance().getNode(i).getDetails(true);
                    file.writeLine(content + "\n");

                }

                file.closeFile();

            }
        }
    }//GEN-LAST:event_jB_ExportAllMouseReleased

    private void jT_NodesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jT_NodesMouseReleased

        int selected = jT_Nodes.getSelectedRow();
        Integer node = (Integer) jT_Nodes.getValueAt(selected, 0);
        jTA_DetailsText.setText(Analyzer.getInstance().getNode(node).getDetails(false));
        jTA_DetailsText.setCaretPosition(0);

    }//GEN-LAST:event_jT_NodesMouseReleased

    private void jB_ExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_ExportActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jB_ExportActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jB_Export;
    private javax.swing.JButton jB_ExportAll;
    private javax.swing.JPanel jP_Details;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTA_DetailsText;
    private javax.swing.JTable jT_Nodes;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the jTable1
     */
    public javax.swing.JTable getTableNode() {
        return jT_Nodes;
    }

//    /**
//     * @return the jTextArea1
//     */
//    public javax.swing.JTextArea getjTextArea1() {
//        return jTA_DetailsText;
//    }
}
