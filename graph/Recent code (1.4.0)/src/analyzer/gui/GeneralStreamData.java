/* This file is part of TraceMetrics
 *
 * TraceMetrics is a trace file analyzer for Network Simulator 3 (www.nsnam.org).
 * The goal is to calculate useful metrics for research and performance measurement.
 * URL: www.tracemetrics.net
 *
 * Copyright (C) 2012  Luiz Felipe Zafra Saggioro
 * Copyright (C) 2012  Flavio Barbieri Gonzaga
 * Copyright (C) 2012  Reuel Ramos Ribeiro
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package analyzer.gui;

import analyzer.controller.Analyzer;
import analyzer.entity.MyFile;
import analyzer.entity.TcpStream;
import analyzer.entity.UdpStream;
import analyzer.gui.ExportGraphics.ExportTCPGraphic;
import java.util.ArrayList;
import javax.swing.JFileChooser;

/**
 *
 * Class to show a list of TCP and UDP streams and its calculates metrics.
 *
 * @since 1.0.0
 */
public class GeneralStreamData extends javax.swing.JPanel {

    /**
     * Creates new form GeneralStreamData
     */
    public GeneralStreamData(String name) {
        initComponents();
        this.setName(name);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jT_Streams = new javax.swing.JTable();
        jB_Details = new javax.swing.JButton();
        jB_Export = new javax.swing.JButton();
        jP_Details = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTA_DetailsText = new javax.swing.JTextArea();
        jB_ExportGraphics = new javax.swing.JButton();

        jT_Streams.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jT_StreamsMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jT_Streams);

        jB_Details.setIcon(new javax.swing.ImageIcon(getClass().getResource("/analyzer/gui/images/document_preview.png"))); // NOI18N
        jB_Details.setText("Stream details");
        jB_Details.setToolTipText("Show all details about the current selected stream");
        jB_Details.setEnabled(false);
        jB_Details.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jB_DetailsMouseReleased(evt);
            }
        });

        jB_Export.setIcon(new javax.swing.ImageIcon(getClass().getResource("/analyzer/gui/images/document_save.png"))); // NOI18N
        jB_Export.setText("Export this");
        jB_Export.setToolTipText("Export the \"details\" panel above to a file.");
        jB_Export.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jB_ExportMouseReleased(evt);
            }
        });

        jP_Details.setBorder(javax.swing.BorderFactory.createTitledBorder("Details"));

        jTA_DetailsText.setColumns(20);
        jTA_DetailsText.setEditable(false);
        jTA_DetailsText.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jTA_DetailsText.setRows(5);
        jScrollPane1.setViewportView(jTA_DetailsText);

        javax.swing.GroupLayout jP_DetailsLayout = new javax.swing.GroupLayout(jP_Details);
        jP_Details.setLayout(jP_DetailsLayout);
        jP_DetailsLayout.setHorizontalGroup(
            jP_DetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 526, Short.MAX_VALUE)
        );
        jP_DetailsLayout.setVerticalGroup(
            jP_DetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );

        jB_ExportGraphics.setIcon(new javax.swing.ImageIcon(getClass().getResource("/analyzer/gui/images/view_statistics.png"))); // NOI18N
        jB_ExportGraphics.setText("Export TCP graphics");
        jB_ExportGraphics.setToolTipText("The tracemetrics will generate a script to be used with GNU-Plot");
        jB_ExportGraphics.setEnabled(false);
        jB_ExportGraphics.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jB_ExportGraphicsMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jP_Details, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jB_Details)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jB_Export)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jB_ExportGraphics)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 233, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jP_Details, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jB_Export)
                        .addComponent(jB_ExportGraphics))
                    .addComponent(jB_Details))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jB_ExportMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jB_ExportMouseReleased

        JFileChooser fc = new JFileChooser();
        String path;
        int index = jT_Streams.getSelectedRow();

        if (Analyzer.getInstance().finished && index >= 0) {

            int status = fc.showDialog(null, "Save");

            if (status == JFileChooser.APPROVE_OPTION) {

                path = fc.getSelectedFile().getAbsolutePath();
                MyFile file = new MyFile();
                file.openFile2Write(path);
                file.writeLine(jT_Streams.getValueAt(index, 0) + ": \n");
                file.writeLine(jTA_DetailsText.getText());
                file.closeFile();

            }
        }
    }//GEN-LAST:event_jB_ExportMouseReleased

    private void jT_StreamsMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jT_StreamsMouseReleased

        String result = "";
        String aux[] = ((String) jT_Streams.getValueAt(jT_Streams.getSelectedRow(), 0)).split(" ");


        if (aux[0].equals("TCP")) {
            jB_ExportGraphics.setEnabled(true);

            ArrayList<TcpStream> tcp = new ArrayList<TcpStream>(Analyzer.getInstance().getTcpStreams().values());

            if (aux[1].equals("ALL")) {

                jB_Details.setEnabled(false);

                for (int i = 0; i < tcp.size(); i++) {

                    result += "------ Stream " + i + " ------";
                    result += "\n" + tcp.get(i).getDetails();
                    result += "\n\n";

                }

            } else {

                jB_Details.setEnabled(true);
                result = tcp.get(Integer.parseInt(aux[1])).getDetails();

            }

        } else if (aux[0].equals("UDP")) {
            jB_ExportGraphics.setEnabled(false);

            jB_Details.setEnabled(true);
            ArrayList<UdpStream> udp = new ArrayList<UdpStream>(Analyzer.getInstance().getUdpStreams().values());

            if (aux[1].equals("ALL")) {

                for (int i = 0; i < udp.size(); i++) {

                    result += "------ Stream " + i + " ------";
                    result += "\n" + udp.get(i).getDetails();
                    result += "\n\n";

                }
            } else {

                result = udp.get(Integer.parseInt(aux[1])).getDetails();

            }
        }

        jTA_DetailsText.setText(result);
        jTA_DetailsText.setCaretPosition(0);

    }//GEN-LAST:event_jT_StreamsMouseReleased

    private void jB_DetailsMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jB_DetailsMouseReleased

        int index = jT_Streams.getSelectedRow();
        if (index >= 0) {
            String aux[] = ((String) jT_Streams.getValueAt(index, 0)).split(" ");

            if (aux[0].equals("TCP")) {

                ArrayList<TcpStream> tcp = new ArrayList<TcpStream>(Analyzer.getInstance().getTcpStreams().values());
                final TcpStream ts = tcp.get(Integer.parseInt(aux[1]));

                if (ts != null) {
                    java.awt.EventQueue.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            new StreamDetails(ts).setVisible(true);
                        }
                    });
                }
            } else {

                final ArrayList<UdpStream> udp = new ArrayList<UdpStream>(Analyzer.getInstance().getUdpStreams().values());

                if (!aux[1].equals("ALL")) {

                    final UdpStream us = udp.get(Integer.parseInt(aux[1]));

                    if (us != null) {
                        java.awt.EventQueue.invokeLater(new Runnable() {
                            @Override
                            public void run() {
                                new StreamDetails(us).setVisible(true);
                            }
                        });
                    }
                } else {
                    if (udp.size() > 0) {
                        java.awt.EventQueue.invokeLater(new Runnable() {
                            @Override
                            public void run() {
                                new StreamDetails(udp).setVisible(true);
                            }
                        });
                    }
                }
            }
        }
    }//GEN-LAST:event_jB_DetailsMouseReleased

    private void jB_ExportGraphicsMouseReleased( java.awt.event.MouseEvent evt ) {//GEN-FIRST:event_jB_ExportGraphicsMouseReleased
        String stream[] = jT_Streams.getValueAt(jT_Streams.getSelectedRow(), 0).toString().split(" ");
        if (stream[0].toLowerCase().equals("tcp")) {
            ExportTCPGraphic.windowFactory(stream[1]).setVisible(true);
        }
    }//GEN-LAST:event_jB_ExportGraphicsMouseReleased
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jB_Details;
    private javax.swing.JButton jB_Export;
    private javax.swing.JButton jB_ExportGraphics;
    private javax.swing.JPanel jP_Details;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTA_DetailsText;
    private javax.swing.JTable jT_Streams;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the jTableStream
     */
    public javax.swing.JTable getTable() {
        return jT_Streams;
    }
}
