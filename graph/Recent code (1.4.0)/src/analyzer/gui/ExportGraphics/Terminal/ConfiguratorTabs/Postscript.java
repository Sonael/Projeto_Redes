/* This file is part of TraceMetrics
 *
 * TraceMetrics is a trace file analyzer for Network Simulator 3 (www.nsnam.org).
 * The goal is to calculate useful metrics for research and performance measurement.
 * URL: www.tracemetrics.net
 *
 * Copyright (C) 2012  Luiz Felipe Zafra Saggioro
 * Copyright (C) 2012  Flavio Barbieri Gonzaga
 * Copyright (C) 2012  Reuel Ramos Ribeiro
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package analyzer.gui.ExportGraphics.Terminal.ConfiguratorTabs;

import analyzer.controller.Utils;
import analyzer.gui.ExportGraphics.Terminal.TerminalConfigurations.EpsConfiguration;
import analyzer.gui.ExportGraphics.Terminal.TerminalConfigurator;
import analyzer.gui.ExportGraphics.Terminal.TerminalTypes;
import analyzer.gui.ExportGraphics.Terminal.MeasureUnit;
import analyzer.gui.bug.BugReport;

/**
 * A panel that will be used as tab on
 * <code>TerminalConfigurator</code> objects.
 *
 * @since 1.2.0
 */
public class Postscript extends javax.swing.JPanel implements TabConfiguration {

    private final TerminalConfigurator parent;

    public Postscript(TerminalConfigurator instance) {
        parent = instance;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bg_epsOrientation = new javax.swing.ButtonGroup();
        bg_epsColor = new javax.swing.ButtonGroup();
        jRB_epsLandscape = new javax.swing.JRadioButton();
        jRB_epsPortrait = new javax.swing.JRadioButton();
        jL_epsOrientation = new javax.swing.JLabel();
        jL_epsColor = new javax.swing.JLabel();
        jRB_epsWithColor = new javax.swing.JRadioButton();
        jRB_epsMonoChrome = new javax.swing.JRadioButton();
        jSpinner_epsWidth = new javax.swing.JSpinner();
        jL_epsWidth = new javax.swing.JLabel();
        jL_epsHeight = new javax.swing.JLabel();
        jSpinner_epsHeight = new javax.swing.JSpinner();
        jCoB_epsUnits = new javax.swing.JComboBox();
        jL_epsUnit = new javax.swing.JLabel();
        jTB_epsLockProportion = new javax.swing.JToggleButton();

        bg_epsOrientation.add(jRB_epsLandscape);
        jRB_epsLandscape.setSelected(true);
        jRB_epsLandscape.setText("Landscape");

        bg_epsOrientation.add(jRB_epsPortrait);
        jRB_epsPortrait.setText("Portrait");

        jL_epsOrientation.setText("Orientation");

        jL_epsColor.setText("Color");

        bg_epsColor.add(jRB_epsWithColor);
        jRB_epsWithColor.setSelected(true);
        jRB_epsWithColor.setText("With color");

        bg_epsColor.add(jRB_epsMonoChrome);
        jRB_epsMonoChrome.setText("Monochrome");

        jSpinner_epsWidth.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(10.0d), Double.valueOf(1.0d), null, Double.valueOf(0.1d)));
        jSpinner_epsWidth.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner_epsWidthStateChanged(evt);
            }
        });

        jL_epsWidth.setText("Width");

        jL_epsHeight.setText("Height");

        jSpinner_epsHeight.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(7.0d), Double.valueOf(1.0d), null, Double.valueOf(0.1d)));
        jSpinner_epsHeight.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner_epsHeightStateChanged(evt);
            }
        });

        jCoB_epsUnits.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Inches", "CMs" }));
        jCoB_epsUnits.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCoB_epsUnitsItemStateChanged(evt);
            }
        });

        jL_epsUnit.setText("unit");

        jTB_epsLockProportion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/analyzer/gui/images/unlock-icon.png"))); // NOI18N
        jTB_epsLockProportion.setRolloverEnabled(true);
        jTB_epsLockProportion.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/analyzer/gui/images/unlock-icon.png"))); // NOI18N
        jTB_epsLockProportion.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/analyzer/gui/images/lock-icon.png"))); // NOI18N
        jTB_epsLockProportion.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jTB_epsLockProportionItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jL_epsOrientation)
                    .addComponent(jL_epsColor))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRB_epsWithColor)
                            .addComponent(jRB_epsLandscape))
                        .addGap(29, 29, 29))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jL_epsWidth)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSpinner_epsWidth, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jL_epsHeight)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSpinner_epsHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRB_epsMonoChrome)
                    .addComponent(jRB_epsPortrait)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jTB_epsLockProportion, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jL_epsUnit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCoB_epsUnits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRB_epsLandscape)
                    .addComponent(jRB_epsPortrait)
                    .addComponent(jL_epsOrientation))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jL_epsColor)
                    .addComponent(jRB_epsWithColor)
                    .addComponent(jRB_epsMonoChrome))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jSpinner_epsWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jL_epsWidth)
                        .addComponent(jL_epsHeight)
                        .addComponent(jSpinner_epsHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCoB_epsUnits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jL_epsUnit))
                    .addComponent(jTB_epsLockProportion, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jSpinner_epsWidthStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner_epsWidthStateChanged
        if (jTB_epsLockProportion.isSelected()) {
            jSpinner_epsHeight.setValue(new Double(jSpinner_epsWidth.getValue().toString()) / parent.getTerminalConfiguration(TerminalTypes.POSTSCRIPT).getProportion());
        }
    }//GEN-LAST:event_jSpinner_epsWidthStateChanged

    private void jSpinner_epsHeightStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner_epsHeightStateChanged
        if (jTB_epsLockProportion.isSelected()) {
            jSpinner_epsWidth.setValue(new Double(jSpinner_epsHeight.getValue().toString()) * parent.getTerminalConfiguration(TerminalTypes.POSTSCRIPT).getProportion());
        }
    }//GEN-LAST:event_jSpinner_epsHeightStateChanged

    private void jTB_epsLockProportionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jTB_epsLockProportionItemStateChanged
        if (jTB_epsLockProportion.isSelected()) {
            parent.getTerminalConfiguration(TerminalTypes.POSTSCRIPT).setProportion(new Double(jSpinner_epsWidth.getValue().toString()), new Double(jSpinner_epsHeight.getValue().toString()));
        }
    }//GEN-LAST:event_jTB_epsLockProportionItemStateChanged

    private void jCoB_epsUnitsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCoB_epsUnitsItemStateChanged
        MeasureUnit unit = MeasureUnit.convert(evt.getItem().toString());
        {jTB_epsLockProportion.setSelected(false);
            switch (unit) {
                case INCHES:
                    jSpinner_epsWidth.setValue(parent.getTerminalConfiguration(TerminalTypes.POSTSCRIPT).getDefaultSize().getWidth());
                    jSpinner_epsHeight.setValue(parent.getTerminalConfiguration(TerminalTypes.POSTSCRIPT).getDefaultSize().getHeight());
                    break;
                case CM:
                    jSpinner_epsWidth.setValue(640);
                    jSpinner_epsHeight.setValue(400);
                    break;
            }
        }

    }//GEN-LAST:event_jCoB_epsUnitsItemStateChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bg_epsColor;
    private javax.swing.ButtonGroup bg_epsOrientation;
    private javax.swing.JComboBox jCoB_epsUnits;
    private javax.swing.JLabel jL_epsColor;
    private javax.swing.JLabel jL_epsHeight;
    private javax.swing.JLabel jL_epsOrientation;
    private javax.swing.JLabel jL_epsUnit;
    private javax.swing.JLabel jL_epsWidth;
    private javax.swing.JRadioButton jRB_epsLandscape;
    private javax.swing.JRadioButton jRB_epsMonoChrome;
    private javax.swing.JRadioButton jRB_epsPortrait;
    private javax.swing.JRadioButton jRB_epsWithColor;
    private javax.swing.JSpinner jSpinner_epsHeight;
    private javax.swing.JSpinner jSpinner_epsWidth;
    private javax.swing.JToggleButton jTB_epsLockProportion;
    // End of variables declaration//GEN-END:variables

    @Override
    public void configureTerminal() {
        EpsConfiguration epsConfiguration = (EpsConfiguration) parent.getTerminalConfiguration(TerminalTypes.POSTSCRIPT);
        //Configure orientation
        if (jRB_epsLandscape.isSelected()) {
            epsConfiguration.setOrientation(EpsConfiguration.Orientation.LANDSCAPE);
        } else {
            epsConfiguration.setOrientation(EpsConfiguration.Orientation.PORTRAIT);
        }
        //Configure color set
        if (jRB_epsWithColor.isSelected()) {
            epsConfiguration.setColoured(true);
        } else {
            epsConfiguration.setColoured(false);
        }
        //Configure size
        epsConfiguration.setSize(
                Utils.truncDouble(new Double(jSpinner_epsWidth.getValue().toString()), 2),
                Utils.truncDouble(new Double(jSpinner_epsHeight.getValue().toString()), 2));
        //Configure unit of size
        try {
            epsConfiguration.setUnit(MeasureUnit.convert(jCoB_epsUnits.getSelectedItem().toString()));
        } catch (NullPointerException e) {
            new BugReport().setVisible(true);
        }
    }
}
